<!DOCTYPE html>
<html lang="en">
  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width,minimum-scale=1">

  <title>Containers</title>
  <meta name="description" content="        Containers    Containers Why Containers? Even for moderately complex projects, the size of the software dependency stack can be huge. Take for exampl...">

  <link rel="canonical" href="https://the-turing-way.netlify.com//es/reproducible_environments/06/containers.html">
  <link rel="alternate" type="application/rss+xml" title="The Turing Way" href="https://the-turing-way.netlify.com//feed.xml">

  <meta property="og:url"         content="https://the-turing-way.netlify.com//es/reproducible_environments/06/containers.html" />
<meta property="og:type"        content="article" />
<meta property="og:title"       content="Containers" />
<meta property="og:description" content="        Containers    Containers Why Containers? Even for moderately complex projects, the size of the software dependency stack can be huge. Take for exampl..." />
<meta property="og:image"       content="https://the-turing-way.netlify.com/" />

<meta name="twitter:card" content="summary">


  <script type="application/ld+json">
  {
  "@context": "http://schema.org",
  "@type": "NewsArticle",
  "mainEntityOfPage": "https://the-turing-way.netlify.com//es/reproducible_environments/06/containers.html",
  "headline": "Containers",
  "datePublished": "2022-03-30T16:46:28+01:00",
  "dateModified": "2022-03-30T16:46:28+01:00",
  "description": "        Containers    Containers Why Containers? Even for moderately complex projects, the size of the software dependency stack can be huge. Take for exampl...",
  "author": {
    "@type": "Person",
    "name": "Kirstie Whitaker"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Data 100 at UC Berkeley",
    "logo": {
      "@type": "ImageObject",
      "url": "https://the-turing-way.netlify.com/",
      "width": 60,
      "height": 60
    }
  },
  "image": {
    "@type": "ImageObject",
    "url": "https://the-turing-way.netlify.com/",
    "height": 60,
    "width": 60
  }
}

  </script>
  <link rel="stylesheet" href="/assets/css/styles.css">

  <!-- <link rel="manifest" href="/manifest.json"> -->
  <!-- <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#efae0a"> -->
  <meta name="msapplication-TileColor" content="#da532c">
  <meta name="msapplication-TileImage" content="/mstile-144x144.png">
  <meta name="theme-color" content="#233947">

  <!-- Favicon -->
  <link rel="shortcut icon" type="image/x-icon" href="/images/logo/favicon.ico">

  <!-- MathJax Config -->
  <!-- Allow inline math using $ and automatically break long math lines -->
<!-- (mostly) copied from nbconvert configuration -->
<!-- https://github.com/jupyter/nbconvert/blob/master/nbconvert/templates/html/mathjax.tpl -->
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
        displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
        processEscapes: true,
        processEnvironments: true
    },
    // Center justify equations in code and markdown cells. Elsewhere
    // we use CSS to left justify single line equations in code cells.
    displayAlign: 'center',
    "HTML-CSS": {
        styles: {'.MathJax_Display': {"margin": 0}},
        linebreaks: { automatic: true },
    },
    
});
</script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-AMS_HTML' async></script>


  <!-- DOM updating function -->
  <script src="/assets/js/page/dom-update.js"></script>

  <!-- Selectors for elements on the page -->
  <script src="/assets/js/page/documentSelectors.js"></script>

  <!-- Define some javascript variables that will be useful in other javascript -->
  <script>
    const site_basename = '/';
  </script>

  <!-- Add AnchorJS to let headers be linked -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/anchor-js/4.2.0/anchor.min.js" async></script>
  <script src="/assets/js/page/anchors.js" async></script>

  <!-- Include Turbolinks to make page loads fast -->
  <!-- https://github.com/turbolinks/turbolinks -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/turbolinks/5.2.0/turbolinks.js" async></script>
  <meta name="turbolinks-cache-control" content="no-cache">

  <!-- Load nbinteract for widgets -->
  

  <!-- Load Thebelab for interactive widgets -->
  <!-- Include Thebelab for interactive code if it's enabled -->


<!-- Display Thebelab button in each code cell -->
<script>
/**
 * Set up thebelab button for code blocks
 */

const thebelabCellButton = id =>
  `<a id="thebelab-cell-button-${id}" class="btn thebebtn o-tooltip--left" data-tooltip="Interactive Mode">
    <img src="/assets/images/edit-button.svg" alt="Start thebelab interactive mode">
  </a>`


const addThebelabButtonToCodeCells =  () => {

  const codeCells = document.querySelectorAll('div.input_area > div.highlight:not(.output) pre')
  codeCells.forEach((codeCell, index) => {
    const id = codeCellId(index)
    codeCell.setAttribute('id', id)
    if (document.getElementById("thebelab-cell-button-" + id) == null) {
      codeCell.insertAdjacentHTML('afterend', thebelabCellButton(id));
    }
  })
}

initFunction(addThebelabButtonToCodeCells);
</script>


<script src="https://unpkg.com/thebelab@latest/lib/index.js" async></script>
<script>
    /**
     * Add attributes to Thebelab blocks
     */

    const initThebelab = () => {
        const addThebelabToCodeCells = () => {
            console.log("Adding thebelab to code cells...");
            // If Thebelab hasn't loaded, wait a bit and try again. This
            // happens because we load ClipboardJS asynchronously.
            if (window.thebelab === undefined) {
                setTimeout(addThebelabToCodeCells, 250)
            return
            }

            // If we already detect a Thebelab cell, don't re-run
            if (document.querySelectorAll('div.thebelab-cell').length > 0) {
                return;
            }

            // Find all code cells, replace with Thebelab interactive code cells
            const codeCells = document.querySelectorAll('.input_area pre')
            codeCells.forEach((codeCell, index) => {
                const id = codeCellId(index)

                // Clean up the language to make it work w/ CodeMirror and add it to the cell
                dataLanguage = ""
                dataLanguage = detectLanguage(dataLanguage);
                codeCell.setAttribute('data-language', dataLanguage)
                codeCell.setAttribute('data-executable', 'true')

                // If the code cell is hidden, show it
                var inputCheckbox = document.querySelector(`input#hidebtn${codeCell.id}`);
                if (inputCheckbox !== null) {
                    setCodeCellVisibility(inputCheckbox, 'visible');
                }
            });

            // Remove the event listener from the page so keyboard press doesn't
            // Change page
            document.removeEventListener('keydown', initPageNav)
            keyboardListener = false;

            // Init thebelab
            thebelab.bootstrap();

            // Remove copy buttons since they won't work anymore
            const copyAndThebeButtons = document.querySelectorAll('.copybtn, .thebebtn')
            copyAndThebeButtons.forEach((button, index) => {
                button.remove();
            });

            // Remove outputs since they'll be stale
            const outputs = document.querySelectorAll('.output *, .output')
            outputs.forEach((output, index) => {
                output.remove();
            });

            // Find any cells with an initialization tag and ask ThebeLab to run them when ready
            var thebeInitCells = document.querySelectorAll('div.tag_thebelab-init');
            thebeInitCells.forEach((cell) => {
                console.log("Initializing ThebeLab with cell: " + cell.id);
                cell.querySelector('.thebelab-run-button').click();
            });
        }

        // Add event listener for the function to modify code cells
        const thebelabButtons = document.querySelectorAll('[id^=thebelab], [id$=thebelab]')
        thebelabButtons.forEach((thebelabButton,index) => {
            if (thebelabButton === null) {
                setTimeout(initThebelab, 250)
                return
            };
            thebelabButton.addEventListener('click', addThebelabToCodeCells);
        });
    }

    // Initialize Thebelab
    initFunction(initThebelab);

// Helper function to munge the language name
var detectLanguage = (language) => {
    if (language.indexOf('python') > -1) {
        language = "python";
    }
    return language;
}
</script>



  <!-- Load the auto-generating TOC (non-async otherwise the TOC won't load w/ turbolinks) -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.8.1/tocbot.min.js" async></script>
  <script src="/assets/js/page/tocbot.js"></script>

  <!-- Google analytics -->
  


  <!-- Clipboard copy button -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.4/clipboard.min.js" async></script>

  <!-- Load custom website scripts -->
  <script src="/assets/js/scripts.js" async></script>

  <!-- Load custom user CSS and JS  -->
  <script src="/assets/custom/custom.js" async></script>
  <link rel="stylesheet" href="/assets/custom/custom.css">

  <!-- Update interact links w/ REST param, is defined in includes so we can use templates -->
  

  <!-- Lunr search code - will only be executed on the /search page -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lunr.js/2.3.6/lunr.min.js" async></script>
  <script>var initQuery = function() {
  // See if we have a search box
  var searchInput = document.querySelector('input#lunr_search');
  if (searchInput === null) {
    return;
  }

  // Function to parse our lunr cache
  var idx = lunr(function () {
    this.field('title')
    this.field('excerpt')
    this.field('categories')
    this.field('tags')
    this.ref('id')

    this.pipeline.remove(lunr.trimmer)

    for (var item in store) {
      this.add({
        title: store[item].title,
        excerpt: store[item].excerpt,
        categories: store[item].categories,
        tags: store[item].tags,
        id: item
      })
    }
  });

  // Run search upon keyup
  searchInput.addEventListener('keyup', function () {
    var resultdiv = document.querySelector('#results');
    var query = document.querySelector("input#lunr_search").value.toLowerCase();
    var result =
      idx.query(function (q) {
        query.split(lunr.tokenizer.separator).forEach(function (term) {
          q.term(term, { boost: 100 })
          if(query.lastIndexOf(" ") != query.length-1){
            q.term(term, {  usePipeline: false, wildcard: lunr.Query.wildcard.TRAILING, boost: 10 })
          }
          if (term != ""){
            q.term(term, {  usePipeline: false, editDistance: 1, boost: 1 })
          }
        })
      });

      // Empty the results div
      while (resultdiv.firstChild) {
        resultdiv.removeChild(resultdiv.firstChild);
      }

    resultdiv.insertAdjacentHTML('afterbegin', '<p class="results__found">'+result.length+' Result(s) found</p>');
    for (var item in result) {
      var ref = result[item].ref;
      if(store[ref].teaser){
        var searchitem =
          '<div class="list__item">'+
            '<article class="archive__item" itemscope itemtype="https://schema.org/CreativeWork">'+
              '<h2 class="archive__item-title" itemprop="headline">'+
                '<a href="'+store[ref].url+'" rel="permalink">'+store[ref].title+'</a>'+
              '</h2>'+
              '<div class="archive__item-teaser">'+
                '<img src="'+store[ref].teaser+'" alt="">'+
              '</div>'+
              '<p class="archive__item-excerpt" itemprop="description">'+store[ref].excerpt.split(" ").splice(0,20).join(" ")+'...</p>'+
            '</article>'+
          '</div>';
      }
      else{
    	  var searchitem =
          '<div class="list__item">'+
            '<article class="archive__item" itemscope itemtype="https://schema.org/CreativeWork">'+
              '<h2 class="archive__item-title" itemprop="headline">'+
                '<a href="'+store[ref].url+'" rel="permalink">'+store[ref].title+'</a>'+
              '</h2>'+
              '<p class="archive__item-excerpt" itemprop="description">'+store[ref].excerpt.split(" ").splice(0,20).join(" ")+'...</p>'+
            '</article>'+
          '</div>';
      }
      resultdiv.insertAdjacentHTML('beforeend', searchitem);
    }
  });
};

initFunction(initQuery);
</script>

  <!-- Load JS that depends on site variables -->
  <script src="/assets/js/page/copy-button.js" async></script>

  <!-- Hide cell code -->
  <script src="/assets/js/page/hide-cell.js" async></script>

  <!-- Printing the screen -->
  <!-- Include nbinteract for interactive widgets -->
<script src="https://printjs-4de6.kxcdn.com/print.min.js" async></script>
<script>
printContent = () => {
    // MathJax displays a second version of any math for assistive devices etc.
    // This prevents double-rendering in the PDF output.
    var ignoreAssistList = [];
    assistives = document.querySelectorAll('.MathJax_Display span.MJX_Assistive_MathML').forEach((element, index) => {
        var thisId = 'MathJax-assistive-' + index.toString();
        element.setAttribute('id', thisId);
        ignoreAssistList.push(thisId)
    });

    // Print the actual content object
    printJS({
        printable: 'textbook_content',
        type: 'html',
        css: "/assets/css/styles.css",
        style: "#textbook_content {padding-top: 40px};",
        scanStyles: false,
        targetStyles: ["*"],
        ignoreElements: ignoreAssistList,
        documentTitle: "Made with Jupyter Book"
    })
};

initPrint = () => {
    document.querySelector('#interact-button-print').addEventListener('click', printContent)
}

initFunction(initPrint)
</script>

</head>

  <body>
    <!-- Include the ThebeLab config so it gets reloaded on each page -->
    <script type="text/x-thebe-config">{
    requestKernel: true,
    binderOptions: {
    repo: "alan-turing-institute/the-turing-way-book",
    ref: "master",
    },
    codeMirrorConfig: {
    theme: "abcdef",
    mode: "python"
    },
    kernelOptions: {
    kernelName: "python3",
    path: ""
    }
}
</script>

    <!-- .js-show-sidebar shows sidebar by default -->
    <div id="js-textbook" class="c-textbook js-show-sidebar">
      



<nav id="js-sidebar" class="c-textbook__sidebar">
  <a href="https://github.com/alan-turing-institute/the-turing-way/"><img src="" class="textbook_logo" id="sidebar-logo" alt="textbook logo" data-turbolinks-permanent/></a>
  <h2 class="c-sidebar__title">The Turing Way</h2>
  <ul class="c-sidebar__chapters">
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/introduction/introduction">
        <a class="c-sidebar__entry"
          href="/es/introduction/introduction.html"
        >
          
            1.
          
          Introduction
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/reproducibility/reproducibility">
        <a class="c-sidebar__entry"
          href="/es/reproducibility/reproducibility.html"
        >
          
            2.
          
          Reproducibility
        </a>
      </li>

      
      

      

      
      

      
        

        

        <ul class="c-sidebar__sections u-hidden-visually">
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducibility/01/importantforscience">
              <a class="c-sidebar__entry"
                href="/es/reproducibility/01/importantforscience.html"
              >
                
                  2.1
                
                Why reproducibility is important
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducibility/02/whycare">
              <a class="c-sidebar__entry"
                href="/es/reproducibility/02/whycare.html"
              >
                
                  2.2
                
                Why you should care
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducibility/03/definitions">
              <a class="c-sidebar__entry"
                href="/es/reproducibility/03/definitions.html"
              >
                
                  2.3
                
                Definitions
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducibility/04/resources">
              <a class="c-sidebar__entry"
                href="/es/reproducibility/04/resources.html"
              >
                
                  2.4
                
                Resources
              </a>
            </li>
            
            
          
        </ul>
      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/open_research/open_research">
        <a class="c-sidebar__entry"
          href="/es/open_research/open_research.html"
        >
          
            3.
          
          Open Research
        </a>
      </li>

      
      

      

      
      

      
        

        

        <ul class="c-sidebar__sections u-hidden-visually">
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/open_research/01/opendata">
              <a class="c-sidebar__entry"
                href="/es/open_research/01/opendata.html"
              >
                
                  3.1
                
                Open data
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/open_research/02/opensourcesoftware">
              <a class="c-sidebar__entry"
                href="/es/open_research/02/opensourcesoftware.html"
              >
                
                  3.2
                
                Open source software
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/open_research/03/openhardware">
              <a class="c-sidebar__entry"
                href="/es/open_research/03/openhardware.html"
              >
                
                  3.3
                
                Open hardware
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/open_research/04/openaccess">
              <a class="c-sidebar__entry"
                href="/es/open_research/04/openaccess.html"
              >
                
                  3.4
                
                Open access
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/open_research/05/opennotebooks">
              <a class="c-sidebar__entry"
                href="/es/open_research/05/opennotebooks.html"
              >
                
                  3.5
                
                Open notebooks
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/open_research/06/openscholarship">
              <a class="c-sidebar__entry"
                href="/es/open_research/06/openscholarship.html"
              >
                
                  3.6
                
                Open scholarship
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/open_research/07/resources">
              <a class="c-sidebar__entry"
                href="/es/open_research/07/resources.html"
              >
                
                  3.7
                
                Resources
              </a>
            </li>
            
            
          
        </ul>
      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/version_control/version_control">
        <a class="c-sidebar__entry"
          href="/es/version_control/version_control.html"
        >
          
            4.
          
          Version Control
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/collaborating_github/collaborating_github">
        <a class="c-sidebar__entry"
          href="/es/collaborating_github/collaborating_github.html"
        >
          
            5.
          
          Collaborating on GitHub/GitLab
        </a>
      </li>

      
      

      

      
      

      
        

        

        <ul class="c-sidebar__sections u-hidden-visually">
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/collaborating_github/1/readme_communication">
              <a class="c-sidebar__entry"
                href="/es/collaborating_github/1/readme_communication.html"
              >
                
                  5.1
                
                README and Project Communication
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/collaborating_github/2/roadmapping">
              <a class="c-sidebar__entry"
                href="/es/collaborating_github/2/roadmapping.html"
              >
                
                  5.2
                
                Roadmapping
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/collaborating_github/3/getting_contributors">
              <a class="c-sidebar__entry"
                href="/es/collaborating_github/3/getting_contributors.html"
              >
                
                  5.3
                
                Getting Contributors
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/collaborating_github/4/checklist_bibliography">
              <a class="c-sidebar__entry"
                href="/es/collaborating_github/4/checklist_bibliography.html"
              >
                
                  5.4
                
                Checklist and Bibliography
              </a>
            </li>
            
            
          
        </ul>
      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/credit/credit">
        <a class="c-sidebar__entry"
          href="/es/credit/credit.html"
        >
          
            6.
          
          Credit for reproducible research
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/rdm/rdm">
        <a class="c-sidebar__entry"
          href="/es/rdm/rdm.html"
        >
          
            7.
          
          Research Data Management
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/reproducible_environments/reproducible_environments">
        <a class="c-sidebar__entry"
          href="/es/reproducible_environments/reproducible_environments.html"
        >
          
            8.
          
          Reproducible Environments
        </a>
      </li>

      
      

      

      
      

      
        

        

        <ul class="c-sidebar__sections u-hidden-visually">
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/01/options">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/01/options.html"
              >
                
                  8.1
                
                Choosing a tool
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/02/package-management">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/02/package-management.html"
              >
                
                  8.2
                
                Conda
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/03/yaml">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/03/yaml.html"
              >
                
                  8.3
                
                YAML
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/04/binder">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/04/binder.html"
              >
                
                  8.4
                
                Binder
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/05/virtual-machines">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/05/virtual-machines.html"
              >
                
                  8.5
                
                Virtual machines
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/06/containers">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/06/containers.html"
              >
                
                  8.6
                
                Containers
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/07/checklist">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/07/checklist.html"
              >
                
                  8.7
                
                Checklist
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reproducible_environments/08/resources">
              <a class="c-sidebar__entry"
                href="/es/reproducible_environments/08/resources.html"
              >
                
                  8.8
                
                Resources
              </a>
            </li>
            
            
          
        </ul>
      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/testing/testing">
        <a class="c-sidebar__entry"
          href="/es/testing/testing.html"
        >
          
            9.
          
          Testing
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/reviewing/reviewing">
        <a class="c-sidebar__entry"
          href="/es/reviewing/reviewing.html"
        >
          
            10.
          
          Reviewing
        </a>
      </li>

      
      

      

      
      

      
        

        

        <ul class="c-sidebar__sections u-hidden-visually">
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reviewing/01/how_helpful">
              <a class="c-sidebar__entry"
                href="/es/reviewing/01/how_helpful.html"
              >
                
                  10.1
                
                How this will help you and why this is useful
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reviewing/02/best_practice">
              <a class="c-sidebar__entry"
                href="/es/reviewing/02/best_practice.html"
              >
                
                  10.2
                
                Best Practice
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reviewing/03/typical_workflows">
              <a class="c-sidebar__entry"
                href="/es/reviewing/03/typical_workflows.html"
              >
                
                  10.3
                
                Typical Workflows
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/reviewing/04/checklists_bib">
              <a class="c-sidebar__entry"
                href="/es/reviewing/04/checklists_bib.html"
              >
                
                  10.4
                
                Checklists, what to learn next and bibliography
              </a>
            </li>
            
            
          
        </ul>
      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/continuous_integration/continuous_integration">
        <a class="c-sidebar__entry"
          href="/es/continuous_integration/continuous_integration.html"
        >
          
            11.
          
          Continuous Integration
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/make/make">
        <a class="c-sidebar__entry"
          href="/es/make/make.html"
        >
          
            12.
          
          Reproducible Research with Make
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/risk_assessment/risk_assessment">
        <a class="c-sidebar__entry"
          href="/es/risk_assessment/risk_assessment.html"
        >
          
            13.
          
          Risk Assessment
        </a>
      </li>

      
      

      

      
      

      
        

        

        <ul class="c-sidebar__sections u-hidden-visually">
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/risk_assessment/01/longreadriskassessment">
              <a class="c-sidebar__entry"
                href="/es/risk_assessment/01/longreadriskassessment.html"
              >
                
                  13.1
                
                Long Read on Risk Assessment
              </a>
            </li>
            
            
          
            
            

            
            
            
            

            <li class="c-sidebar__section" data-url="/es/risk_assessment/02/finalsummary">
              <a class="c-sidebar__entry"
                href="/es/risk_assessment/02/finalsummary.html"
              >
                
                  13.2
                
                Summary
              </a>
            </li>
            
            
          
        </ul>
      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/binderhub/binderhub">
        <a class="c-sidebar__entry"
          href="/es/binderhub/binderhub.html"
        >
          
            14.
          
          BinderHub
        </a>
      </li>

      
      

      

      
      

      

      
    
      
      

      
      
      
      

      
      
      <li class="c-sidebar__chapter" data-url="/es/glossary/glossary">
        <a class="c-sidebar__entry"
          href="/es/glossary/glossary.html"
        >
          
            15.
          
          Glossary
        </a>
      </li>

      
      

      

      
      

      

      
    
  </ul>
  <p class="sidebar_footer">Powered by <a href="https://github.com/jupyter/jupyter-book">Jupyter Book</a></p>
</nav>

      
      <div class="c-topbar" id="top-navbar">
  <!-- We show the sidebar by default so we use .is-active -->
  <div class="c-topbar__buttons">
    <button
      id="js-sidebar-toggle"
      class="hamburger hamburger--arrowalt is-active"
    >
      <span class="hamburger-box">
        <span class="hamburger-inner"></span>
      </span>
    </button>
    <div class="buttons">
<div class="download-buttons-dropdown">
    <button id="dropdown-button-trigger" class="interact-button"><img src="/assets/images/download-solid.svg" alt="Download" /></button>
    <div class="download-buttons">
        
        <a id="interact-button-print"><button id="interact-button-download" class="interact-button">.pdf</button></a>
    </div>
</div>


</div>

  </div>
  <!-- Empty sidebar placeholder that we'll auto-fill with javascript -->
  <aside class="sidebar__right">
    <header><h4 class="nav__title"><img src="/assets/images/list-solid.svg" alt="Search" />   On this page</h4></header>
    <nav class="onthispage">
    </nav>
  </aside>
  <a href="/search.html" class="topbar-right-button" id="search-button">
    <img src="/assets/images/search-solid.svg" alt="Search" />
  </a>
</div>

      <main class="c-textbook__page" tabindex="-1">
            <div class="c-textbook__content" id="textbook_content">
                  <main class="jupyter-page">
    <div id="page-info"><div id="page-title">Containers</div>
</div>
    
<div class="jb_cell">

<div class="cell border-box-sizing text_cell rendered"><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p><a name="Containers_section"></a></p>
<h2 id="Containers">Containers<a class="anchor-link" href="#Containers"> </a></h2><p><a name="What_are_containers"></a></p>
<h3 id="Why-Containers?">Why Containers?<a class="anchor-link" href="#Why-Containers?"> </a></h3><p>Even for moderately complex projects, the size of the software dependency stack can be huge. Take for example a simple
pipeline to build a pdf report for an analysis scripted in R using Rmarkdown. To make this reproducible, not only (i)
the respective R packages need to be installed and (ii) the R version needs to be the same, but also (iii) the versions
of pandoc and LaTeX need to be exaclty the same as during runtime.</p>
<p>Instead of trying to resolve these dependencies via a package manager (such as conda) which also depends on all required
software being available in a single package manager, it might be easier to simply create a snapshot of the entire
computing environment including all dependencies. These computing environments are then self-contained, hence the name
'containers'.</p>
<h3 id="What-are-containers?">What are containers?<a class="anchor-link" href="#What-are-containers?"> </a></h3><p>Containers allow a researcher to package up a project with all of the parts it needs, such as libraries, dependencies,
and system settings and ship it all out as one package. Anyone can then open up a container and work within it, viewing
and interacting with the project as if the machine they are accessing it from is identical to the machine specified in
the container - regardless of what their computational environment <em>actually</em> is. They are designed to make it easier to
transfer projects between very different environments.</p>
<p>In a way, containers behave like a virtual machine. To the outside world, they look like their own complete system. But
unlike a virtual machine, rather than creating a whole virtual operating system plus all the software and tools
typically packaged with one, containers only contain the individual components they need in order to operate the project
they contain. This gives a significant performance boost and reduces the size of the application.</p>
<p>Containers are particularly useful way for reproducing research which relies on software to be configured in a certain
way, and/or which makes use of libraries that vary between (or don't exist on) different systems. In summary containers
are a more robust way of sharing reproducible research than, for instance, package management systems or Binder because
they reproduce the entire system used for the research, not just the packages explicitly used by it. Their major
downside is that due to their greater depth they are conceptually more difficult to grasp and produce than many other
methods of replicating computational environments.</p>
<p>Ben Corrie give as reasonably accessible overview on core concepts in
<a href="https://www.youtube.com/watch?v=EnJ7qX9fkcU">'What is a container?'</a>.</p>
<p><a name="What_are_images"></a></p>
<h3 id="What-are-images?">What are images?<a class="anchor-link" href="#What-are-images?"> </a></h3><p>Images are the files used to generate containers. Humans don't make images, they write the recipes to generate images.
Containers are then identical copies instantiated from images.</p>
<p>Think of it like this:</p>
<ul>
<li>A recipe file a human writes contains all the steps to generate a working version of the project and its computational
environment, but no actual materials. Think of this as like a blueprint.</li>
<li>Building an image takes that recipe and using it assembles all the packages, software libraries, and configurations
needed to make the fully fledged project and environment and bundles them up in a condensed lump. Think of images like
a bit of flat pack furniture made using the blueprint.</li>
<li>Containers take that image and assemble a full working version of the project and the environment needed to run it.
Think of this as assembling the bit of flat pack furniture.</li>
</ul>
<p>So if a researcher wants to allow others to reproduce their work they would need to write a recipe file, and use it to
build an image of their project. They can then share this image file with anyone who wants to replicate their work. That
person can then use the image to generate a container containing a working version of the project.</p>
<p><a name="What_is_Docker"></a></p>
<h3 id="What-is-Docker?">What is Docker?<a class="anchor-link" href="#What-is-Docker?"> </a></h3><p>There are a number of different tools available for creating and working with containers. We will focus on Docker, which
is widely used, but be aware that others such as Singularity also exist. Singularity is sometimes preferred for use on
HPC systems as it does not need <code>sudo</code> permissions to be run, while Docker does.</p>
<p>In Docker the recipe files used to generate images are known as Dockerfiles, and should be named "Dockerfile".</p>
<p><a href="https://hub.docker.com/">DockerHub</a> hosts a great many pre-made images which can be downloaded and build upon, such as
<a href="https://hub.docker.com/_/ubuntu">images</a> of Ubuntu machines. This makes the process of writing Dockerfiles relatively
easy since users very rarely need to start from scratch, they can just customise existing images. However, this does
leave a user vulnerable to similar security issues as were described in the section on <a href="#Security_issues">YAML files</a>:</p>
<ul>
<li>It is possible to include malicious code in Docker images</li>
<li>It is possible for people producing images to unknowingly include software in them with security vulnerabilities</li>
</ul>
<p><a href="https://opensource.com/business/14/7/docker-security-selinux">This</a> article goes deeper into the potential security
vulnerabilities of containers and here is a
<a href="https://opensource.com/business/14/9/security-for-docker">detailed breakdown</a> of security features currently within
Docker, and how they function. The best advice for using images built by others is as standard- only download and run
something on your machine if it comes from a trusted source. DockerHub has "official image" badges for commonly used,
verified images as shown here:</p>
<p><img src="../../figures/docker_official_image.png" alt="Docker_official_image"></p>
<p><a name="Installing_Docker"></a></p>
<h3 id="Installing-Docker">Installing Docker<a class="anchor-link" href="#Installing-Docker"> </a></h3><p>Installers for Docker on a variety of different systems are available <a href="https://docs.docker.com/install/">here</a>. Detailed
installation instructions are also available for a variety of operating systems such as
<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">ubuntu</a>,
<a href="https://docs.docker.com/install/linux/docker-ce/debian/">debian</a>,
<a href="https://docs.docker.com/docker-for-mac/install/">Macs</a>, and
<a href="https://docs.docker.com/docker-for-windows/install/">Windows</a>.</p>
<p><a name="Key_commands"></a></p>
<h3 id="Key-commands">Key commands<a class="anchor-link" href="#Key-commands"> </a></h3><p>Here are a few key commands for creating and working with containers.</p>
<ul>
<li>To build an image from a Dockerfile go to the directory where the Dockerfile is and run:
<pre><code>sudo docker build tag=name_to_give_image .</code></pre>
</li>
<li>To list the images on your system use
<pre><code>sudo docker image ls</code></pre>
</li>
<li>To remove an image run
<pre><code>sudo docker rmi image_name</code></pre>
</li>
<li>To open a container from an image run
<pre><code>sudo docker run -i -t image_name</code></pre>
The <code>-i -t</code> flags automatically open up an interactive terminal within the container so you can view and interact with
the project files.</li>
<li>To exit an interactive terminal use the command <code>exit</code>.</li>
<li>To get a list of active containers with IDs run
<pre><code>sudo docker container ls</code></pre>
</li>
<li>There are also three main commands used for changing the status of containers:<ul>
<li>Pausing suspends the process running the container.
<pre><code>sudo docker container_ID pause</code></pre>
Containers can be unpaused by replacing <code>pause</code> with <code>unpause</code>.</li>
<li>Stopping a container terminates the process running it. A container must be stopped before it can be deleted.
<pre><code>sudo docker container_ID stop</code></pre>
A stopped container can be restarted by replacing <code>stop</code> with <code>restart</code>.</li>
<li>If <code>stop</code> does not work containers can be killed using
<pre><code>sudo docker container_ID kill</code></pre>
</li>
</ul>
</li>
<li>To remove a container run
<pre><code>sudo docker rm container_ID</code></pre>
</li>
</ul>
<p><a name="Writing_Dockerfiles"></a></p>
<h3 id="Writing-Dockerfiles">Writing Dockerfiles<a class="anchor-link" href="#Writing-Dockerfiles"> </a></h3><p>Let's go through the anatomy of a very simple Dockerfile:</p>

<pre><code># Step 1: Set up the computational environment

# Set the base image
FROM ubuntu

# Install packages needed to run the project
RUN apt-get update
RUN apt-get install sudo
RUN sudo apt-get update
RUN sudo apt-get install -y python3.7
RUN sudo apt-get install -y python3-pip
RUN pip3 install numpy

#-----------------------

# Step 2: Include the project files in the image

# Make a directory called "project" to hold the project files
RUN mkdir project

# Copy files from the project_files directory on the machine building the image
# into the "project" directory created by the previous line of code
COPY project_files/* project/</code></pre>
<p>This looks complicated, but most of the lines in this example are comments (which are preceded by <code>#</code>s), There are only
nine lines of actual code. The first of these is a <code>FROM</code> statement specifying a base image. All Dockerfiles require a
FROM, even if it's just <code>FROM SCRATCH</code>. All the following commands in a Dockerfile build upon the base image to make a
functioning version of the researcher's project.</p>
<p>It is worth spending time carefully choosing an appropriate base image as doing do can reduce the amount of work
involved in writing a Dockerfile dramatically. For example a collection of images with the R programming language
included in them can be found <a href="https://github.com/rocker-org/rocker-versioned">here</a>. If a project makes use of R it is
convenient to use one of these as a base image rather than spend time writing commands in your Dockerfile to install R.</p>
<p>The biggest block of lines comes next, it's a series of <code>RUN</code> statements, which run shell command when building the
image. In this block they are used to install the software necessary to run the project. Run commands can also be
chained as follows if desired:</p>

<pre><code>RUN command_to_do_thing_1 \
   &amp;&amp; command_to_do_thing_2 \
   &amp;&amp; command_to_do_thing_3 \
   &amp;&amp; command_to_do_thing_4</code></pre>
<p>Another RUN statement is used to run the shell command <code>RUN mkdir project</code> which makes a directory called project in the
container to host the files related to this project.</p>
<p>Finally the <code>COPY</code> command is used to copy the project files from the machine building the image into the image itself.
The syntax of this command is <code>COPY file_to_copy location_in_container_to_copy_to</code>. In this example all the files in the
"project_files" directory are included in the "project" file in the container. Note that you can only copy files from
the directory where the Dockerfile is located, or subdirectories within it (in the example given here the project_files
subdirectory).</p>
<p>The <code>ADD</code> command has the same capabilities as <code>COPY</code>, but it can also be used to add files not on the machine building
the image. For example it can be used to include files hosted online by following ADD with a URL to the file. It is good
practice to use <code>COPY</code> except where <code>ADD</code> is specifically required as the term <code>COPY</code> is more explicit about what is
being done.</p>
<p>Here's what happens if a container is opened from an image called book_example built from the example above:</p>
<p><img src="../../figures/container_example.png" alt="container_example"></p>
<p>As you can see the directory "project" has been created, and if we look inside the project files "analysis.py" and
"data.csv" have been copied into it. Because the software required for the project has already been included by the
Dockerfile in the image the "analysis.py" script runs without any further software needing to be installed.</p>
<p><a name="WORKDIR"></a></p>
<h4 id="WORKDIR">WORKDIR<a class="anchor-link" href="#WORKDIR"> </a></h4><p>This command can be used in Dockerfiles to change the current working directory. Commands that follow this in the
Dockerfile will be applied within the new working directory unless/until another WORKDIR changes the working directory.
When a container is opened with an interactive terminal the terminal will open in the final working directory. Here's a
simple example of a Dockerfile that uses <code>WORKDIR</code>, and the container it generates.</p>

<pre><code># Basic setup
FROM ubuntu
RUN apt-get update

# Make a directory called A
RUN mkdir A

# Make the working directory A
WORKDIR A

# Make two directories, one called B_1 and one called B_2
RUN mkdir B_1
RUN mkdir B_2</code></pre>
<p><img src="../../figures/workdir_example.png" alt="workdir_example"></p>
<p>Directories B_1 and B_2 have been created within directory A.</p>
<p>WORKDIR should be used whenever changing directories is necessary when building an image. It may be tempting to use
<code>RUN cd directory_name</code> instead as this syntax will be more familiar to those that commonly work via the command line,
but this can lead to errors. After each <code>RUN</code> statement in a Dockerfile the image is saved, any following commands are
applied to the image anew. As an example here is what happens in the above example if the <code>WORKDIR A</code> line is swapped
for <code>RUN cd A</code></p>
<p><img src="../../figures/cd_example.png" alt="cd_example"></p>
<p>All the directories have are in the top level in this case, rather than B_1 and B_2 being inside A. This is because the
image was restarted after the <code>RUN cd A</code> command and opened at the top (root) level by default, so that is where the
<code>mkdir B_1</code> and <code>mkdir B_2</code> commands took effect.</p>
<p><a name="Other_commands"></a></p>
<h4 id="Other-commands">Other commands<a class="anchor-link" href="#Other-commands"> </a></h4><p>Other commands that are sometimes used in Dockerfiles include:</p>
<ul>
<li><code>CMD</code>: This is used to run commands as soon as the container is opened. To clarify this is different to RUN commands
which are commands run as part of <em>setting up</em> a container. For example to have a welcome message when a container is
opened from the image CMD could be used as follows:
<pre><code>CMD ["echo","Welcome! You just opened this container!"]</code></pre>
It's good practice to use CMD for any commands that need to be run before someone starts working in the container
instead of forcing users to run them themselves (and trusting that they will even know that they need to).</li>
<li><code>VOLUMES</code>: These will be discussed <a href="#Volumes">later</a>.</li>
<li><code>MAINTAINER</code>: information regarding the person that wrote the Dockerfile. Typically included at the top of a
Dockerfile.</li>
<li><code>EXPOSE</code>: This includes ports that should be exposed, this is more relevant to people using Docker to share web apps.</li>
<li><code>USER</code>: Change the user that a command is run as (useful for dropping privileges).</li>
</ul>
<p><a name="Building_images_and_dockerignore_files"></a></p>
<h3 id="Building-images-and-.dockerignore-files">Building images and .dockerignore files<a class="anchor-link" href="#Building-images-and-.dockerignore-files"> </a></h3><p>As mentioned in the <a href="#Key_commands">key commands</a> section, to build an image open a terminal in the same directory as
the Dockerfile to be used and run</p>

<pre><code>sudo docker build tag=name_to_give_image .</code></pre>
<p>When an image is built everything in the Dockerfile's directory and below (this is called the "context") is sent to the
Docker daemon to build the image. The deamon uses the Dockerfile and its context to build the image. If the context
contains many large files which aren't needed for building the image (old datafiles, for example) then it is a waste of
time sending them to the daemon, and doing do can make the process of building an image slow. Files can be excluded from
the context by listing them in a text file called .dockerignore, and it is good practise to do so.</p>
<p>The files do not need to be listed individually in the .dockerignore file. Here is an example of the contents of a
.dockerignore file:</p>

<pre><code>*.jpg
**/*.png
data_files/*
file_to_exclude.txt</code></pre>
<p>This excludes from the context:</p>
<ul>
<li>All jpg files in the same directory as the Dockerfile file</li>
<li>All png files in the same directory as the Dockerfile file <em>or any subdirectories within it</em></li>
<li>All files within the data_files directory</li>
<li>The file named "file_to_exclude.txt"</li>
</ul>
<p><a name="Sharing_images"></a></p>
<h3 id="Sharing-images">Sharing images<a class="anchor-link" href="#Sharing-images"> </a></h3><p>Docker images can be shared most easily via <a href="https://hub.docker.com/">DockerHub</a>, which requires an account. Say two
researchers, Alice and Bob, are collaborating on a project and Alice wishes to share an image of some of her work with
Bob.</p>
<p>To do this Alice must:</p>
<ul>
<li>Write a Dockerfile to produce an image of her work</li>
<li>Build the image. She (being inventive) calls it image_name</li>
<li>Go to DockerHub and sign up for an account. Say Alice (again, being inventive) chooses the username username_Alice</li>
<li>Log into DockerHub via the terminal on her machine using <code>sudo docker login</code></li>
<li>Tag the image of her project on her machine via the command line by supplying the name of the image and using the
pattern <code>username/image_name:version</code>, so Alice runs the command:
<pre><code>sudo docker tag image_name username_Alice/image_name:version_1</code></pre>
</li>
<li>Push the image to her DockerHub account using <code>sudo docker tag push username_Alice/image_name:version_1</code></li>
<li>Alice's image is now online and can be downloaded. Over to Bob...</li>
</ul>
<p>Bob (assuming he already has Docker installed) can open a container from Alice's image simply by running</p>

<pre><code>sudo docker run -i -t username_Alice/image_name:version_1</code></pre>
<p>Initially Docker will search for this image on Bob's machine, and when it doesn't find it it will <em>automatically</em> search
DockerHub, download Alice's image, and open the container with Alice's work and environment on Bob's machine.</p>
<p><a name="Copying_files_to_and_from_containers"></a></p>
<h3 id="Copying-files-to-and-from-containers">Copying files to and from containers<a class="anchor-link" href="#Copying-files-to-and-from-containers"> </a></h3><p>Containers act much like virtual machines, as a result copying files into and out of them is not as trivial as copying
files to different locations within the same computer is.</p>
<p>A file can be copied from the machine running a container into the container using:</p>

<pre><code>sudo docker cp file_name conteriner_ID:path_to_where_to_put_file/file_name</code></pre>
<p>Recall that container IDs can be obtained using <code>sudo docker container ls</code>.</p>
<p>A file can be copied from within a container to the machine running the container by running the following command on
the machine running the container:</p>

<pre><code>sudo docker cp conteriner_ID:path_to_file/file_name path_to_where_to_put_file/file_name</code></pre>
<p>If the second part (the <code>path_to_where_to_put_file/file_name</code>) is substituted for a <code>.</code> then the file will be copied to
whatever directory the terminal running the command is in.</p>
<p><a name="Volumes"></a></p>
<h3 id="Volumes">Volumes<a class="anchor-link" href="#Volumes"> </a></h3><p>Every time a container is opened from an image that container is completely new. For example say a container is opened
and work is done within it, files created, changed, deleted and so on. If that container is then closed and the image it
came from is again used to start a container none of that work will be in the new one. It will simply have the starting
state described in the image.</p>
<p>This can be a problem if a researcher wants to work in a container over a period of time, but there is a way around this
using "volumes". These store work done within a container even after it is closed, and can then be used to load that
work into future containers.</p>
<p>To create/use a volume run</p>

<pre><code>sudo docker run -i -t --mount source=volume_name,target=/target_dirctory image_name</code></pre>
<p>Hopefully you will give your volume a more descriptive name than volume_name. A "target" directory is required, only
work within this directory in the container which will be saved in the volume. Once the researcher is done they can
close the container as normal. When they come back to the project and want to continue their work they just need to use
the exact same command as above, and it will load the work contained in volume_name into the new container. It will save
any new work there too.</p>
<p>Volume related commands:</p>
<ul>
<li>List volumes: <code>sudo docker volume ls</code></li>
<li>Delete a volume: <code>sudo docker volume rm volume_name</code></li>
<li>Delete all unattached volumes: <code>sudo docker volume prune</code></li>
<li>If, when deleting a container a <code>-v</code> is included after <code>rm</code> in <code>sudo docker rm container_ID</code> any volumes associated
with the container will also be deleted.</li>
</ul>
<p><a name="Singularity"></a></p>
<h3 id="Singularity">Singularity<a class="anchor-link" href="#Singularity"> </a></h3><blockquote><p>Prerequisites: At present, Singularity only runs on linux systems (for example Ubuntu). If you use, macOS,
<a href="https://www.sylabs.io/singularity-desktop-macos/">Singularity Desktop for macOS</a> is in "Alpha Preview" stage.</p>
</blockquote>
<p>A major drawback of Docker for reproducible research is that it is not intended as a user-space application but as a
tool for server administrators. As such it requires root access to operate. There is, however, no reason why the
execution of an analysis should require root access for the user. This is especially important when computations are
conducted on shared resource like HPC systems where users will never have root access.</p>
<p>The <a href="https://www.sylabs.io/">singularity</a> container software was introduced to address exactly this issue. Singularity
was created with HPC sytems and reproducible research in mind (see <a href="https://www.youtube.com/watch?v=DA87Ba2dpNM">this</a>
video). It does not require root access to run (only to build container <em>images</em>!) and thus enables HPC users to locally
build container images before running analyses, for example, on a high-performance cluster. As an added benefit, this makes it
possible to use almost any software on an HPC system without having to bother admin staff with installing it. In
recognition of the fact that Docker is <em>the</em> most well known containerization approach, singularity aims at maintaining
compatibility with docker containers as much as possible, meaning that singularity can be used to run normal docker containers
(without requiring root access!).</p>
<p>Singularity can be used to run Docker images or extend them by building new images based on docker containers as base
layer. For instance, we could use singularity to spin up a vanilla ubuntu container and getting a shell in it using the
ubuntu docker image via</p>

<pre><code>singularity shell docker://ubuntu</code></pre>
<p>(type <code>exit</code> to leave the interactive shell again).</p>
<p>Just as docker images are built using <code>Dockerfile</code> files, singularity containers are built from singularity definition
files. The process and syntax is similar to docker files but there are subtle differences. As a minimal working example,
we can build a 'lolcow' container based on the official ubuntu docker container image. Put the following in a
<code>lolcow.def</code> file (based on the
<a href="https://www.sylabs.io/guides/3.2/user-guide/build_a_container.html">Singularity documentation</a>):</p>

<pre><code>Bootstrap: docker
From: ubuntu

%post
    apt-get -y update
    apt-get -y install fortune cowsay lolcat

%environment
    export LC_ALL=C
    export PATH=/usr/games:$PATH

%runscript
    fortune | cowsay | lolcat</code></pre>
<p>This 'recipe' uses a docker image as basis (here: ubuntu) installs a few apt packages, modifies a few environment
variables, and specifies the runscript (which is executed using the <code>singularity run</code> command). Details on the
singularity definition file format can be found in the official <a href="https://www.sylabs.io/docs/">documentation</a>.</p>
<p>A container image can then be built (requiring root!) via</p>

<pre><code>sudo singularity build lolcow.simg lolcow.def</code></pre>
<p>This will pull the ubuntu image from dockerhub, run the steps of the recipe in the definition file and produce a single
output image file (<code>lolcow.simg</code>). Finally the runscript is executed as</p>

<pre><code>singularity run lolcow.simg</code></pre>
<p>Ideally, you should see a nice ASCII cow and a few words of wisdom, as in</p>

<pre><code>___________________________________
/ You will be called upon to help a \
\ friend in trouble.                /
-----------------------------------
       \   ^__^
        \  (oo)\_______
           (__)\       )\/\
               ||----w |
               ||     ||</code></pre>
<p>Being HPC compatible, singularity containers are also supported by a wide range of workflow management tools. For
example, both <a href="https://snakemake.readthedocs.io/en/stable/">snakemake</a> and
<a href="https://www.nextflow.io/docs/latest/singularity.html">nextflow</a> support job-specific singularity containers. This makes
singularity containers uniquely suited for parallelizing workflows on HPC systems using the widely used
<a href="https://slurm.schedmd.com/documentation.html">slurm</a> workload manager. Using singularity containers and
snakemake/nextflow is therefore a way of scaling reproducibility to massive scale and - as an added benefit - bringing
workflows from a desktop machine to an HPC system no longer requires writing custom job submission scripts.</p>
<h4 id="Long-term-storage-of-container-images">Long-term storage of container images<a class="anchor-link" href="#Long-term-storage-of-container-images"> </a></h4><p>It is important to note that a mere container recipe file is not reproducible in itself since the build process depends
on various (online) sources. Thus the same recipe file might lead to different images if the underlying sources were
updated.</p>
<p>To achieve true reproducibility, it is therefore important to store the actual container <em>images</em>. For singularity
images, this is particularly easy since an image is simply a large file. These can vary in size from a few tens of
megabytes (microcontainers) to several gigabyte and are therefore not suited for being stored in a git repository
themselves. A free, citable, and long-term solution to storing container images is <a href="https://zenodo.org/">zenodo.org</a>
which allows up to 50 Gb per repository. Since zenodo is minting DOIs for all content uploaded, the images are
immediately citable. In contrast to <a href="https://hub.docker.com/">dockerhub</a> (which also only accepts docker images)
zenodo.org is also clearly geared towards long-term storage and discoverability via a sophisticated metadata system and
thus ideally suited for storing scientific containers associated with particular analyses since these tend to not change
over time.</p>
<h4 id="Words-of-Warning">Words of Warning<a class="anchor-link" href="#Words-of-Warning"> </a></h4><p>Even though singularity and docker might look similar, they are conceptually very different. Besides the obvious fact
that singularity does not require root access to run containers, it also handles the distinction between the host and
container file system differently. For instance, by default singularity includes a few bind points in the container,
namely:</p>
<ul>
<li><code>$HOME</code></li>
<li><code>/sys:/sys</code></li>
<li><code>/proc:/proc</code></li>
<li><code>/tmp:/tmp</code></li>
<li><code>/var/tmp:/var/tmp</code></li>
<li><code>/etc/resolv.conf:/etc/resolv.conf</code></li>
<li><code>/etc/passwd:/etc/passwd</code></li>
<li><code>$PWD</code></li>
</ul>
<p>Note, <code>$PWD</code> comes in handy since it implies that all files in the working directory are visible within the container.
Binding <code>$HOME</code> by default, however, also implies that software using configuration files from <code>$HOME</code> might behave in
an unexpected way since the image specific configuration files are overwritten with the current users settings in
<code>$HOME</code>. While this behaviour is handy in HPC scenarios, it is potentially dangerous for reproducible research. To avoid
potential issues, any software installed in a singularity container should be pointed to a global, user-independent
configuration files.</p>

</div>
</div>
</div>
</div>

 


    </main>
    
            </div>
            <div class="c-textbook__footer" id="textbook_footer">
              
<nav class="c-page__nav">
  
    
    

    <a id="js-page__nav__prev" class="c-page__nav__prev" href="/es/reproducible_environments/05/virtual-machines.html">
      〈 <span class="u-margin-right-tiny"></span> Virtual machines
    </a>
  

  
    

    
    <a id="js-page__nav__next" class="c-page__nav__next" href="/es/reproducible_environments/07/checklist.html">
      Checklist <span class="u-margin-right-tiny"></span> 〉
    </a>
  
</nav>

              <footer>
  <p class="footer">This page was created by <a href="https://github.com/alan-turing-institute/the-turing-way#contributors">The Turing Way Community</a></p>
</footer>

            </div>

        </div>
      </main>
    </div>
  </body>
</html>
